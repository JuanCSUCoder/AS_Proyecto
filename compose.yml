version: '3'

services:
  reverse-proxy:
    # The official v3 Traefik docker image
    image: traefik:v3.0
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - '--api.insecure=true'
      - '--providers.docker'
      - '--metrics.prometheus=true'
      - '--metrics.prometheus.buckets=0.1,0.3,1.2,5.0'
      - '--metrics.prometheus.addrouterslabels=true'
      - '--metrics.prometheus.addEntryPointsLabels=true'
      - '--metrics.prometheus.addServicesLabels=true'
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    labels:
      - "traefik.http.routers.traefik.rule=Host(`localhost.com`)"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart:  always
    volumes:
      - grafana_data:/var/lib/grafana
    labels:
      - "traefik.http.routers.grafana.rule=Host(`Miportal.grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
  pedidos:
    build:
      context: ./microservices/mas-10-gestion-pedidos/
      dockerfile: Dockerfile
    labels:
      - "--api = true"
      - "traefik.http.routers.pedidos.rule=Host(`miportal.pedidos.localhost`)"
      - "traefik.http.services.pedidos.loadbalancer.server.port=9080"
      - "traefik.http.routers.pedidos.service=api@internal"
      - "traefik.http.routers.pedidos.entrypoints=api@internal"

volumes:
  grafana_data: